syntax = "proto3";

package railyard;

message Message {
  string key = 1;
  bytes value = 2;
}

message ProduceMessageRequest {
  string topic = 1;
  int32 partition = 2;
  Message message = 3;
}

message ProduceMessageResponse {
  bool success = 1;
}

message FetchMessagesRequest {
  string topic = 1;
  int32 partition = 2;
  int32 offset = 3;
  int32 maxBytes = 4;
}

message FetchMessagesResponse {
  repeated Message messages = 1;
}

message CreateTopicRequest {
  string topic = 1;
}

message CreateTopicResponse {
  bool success = 1;
}

message DeleteTopicRequest {
  string topic = 1;
}

message DeleteTopicResponse {
  bool success = 1;
}

message ListTopicsRequest {}

message ListTopicsResponse {
  repeated string topics = 1;
}

message DescribeTopicRequest {
  string topic = 1;
}

message DescribeTopicResponse {
  repeated int32 partitions = 1;
}

message AppendEntriesRequest {
  string nodeId = 1;
  repeated Message entries = 2;
}

message AppendEntriesResponse {
  bool success = 1;
}

message RequestVoteRequest {
  string nodeId = 1;
  int64 term = 2;
  string candidateId = 3;
  int32 lastLogIndex = 4;
  int64 lastLogTerm = 5;
}

message RequestVoteResponse {
  bool voteGranted = 1;
}

message GetClusterInfoRequest {}

message GetClusterInfoResponse {
  string leaderNodeId = 1;
  repeated string nodeStates = 2;
}

service Railyard {
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
  rpc ProduceMessage(ProduceMessageRequest) returns (ProduceMessageResponse);
//   rpc FetchMessages(FetchMessagesRequest) returns (FetchMessagesResponse);
//   rpc CreateTopic(CreateTopicRequest) returns (CreateTopicResponse);
//   rpc DeleteTopic(DeleteTopicRequest) returns (DeleteTopicResponse);
//   rpc ListTopics(ListTopicsRequest) returns (ListTopicsResponse);
//   rpc DescribeTopic(DescribeTopicRequest) returns (DescribeTopicResponse);
//   rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
//   rpc GetClusterInfo(GetClusterInfoRequest) returns (GetClusterInfoResponse);
}
